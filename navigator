#!/usr/bin/env python
import csv
import os
import datetime
import collections
import optparse
import heapq
import yaml
import textwrap

# note: name comes later to allow using the builtin sort
EVENT = collections.namedtuple('EVENT',
            'dt_start dt_end name rooms lecturers notes')

def list_classes():
    '''return names of classes by looking up files in ./classes
    '''
    return os.listdir('classes')

def read_class(name):
    '''read a classes' csv file and return EVENT tuples
    '''
    schedule_path = os.path.join('classes', name)
    notes_path = os.path.join('notes', name)

    with file(schedule_path) as fh:
        schedule = csv.reader(fh, delimiter='\t')

        assert schedule.next() == ['Datum', 'Zeit', 'Raum', 'Dozierende'], \
            'problem with the file format found in: ' + path

        # what: load notes
        class_notes = {}
        if os.path.exists(notes_path):
            with file(notes_path) as fh:
                class_notes = yaml.load(fh)

        for entry in schedule:
            weekday, date = entry[0].split(' ')
            start, end = entry[1].split(' - ')
            rooms = entry[2].split(', ')
            lecturers = entry[3].split(', ')

            year, month, day = map(int, date.split('.')[::-1])
            start_h, start_m = map(int, start.split(':'))
            dt_start = datetime.datetime(year, month, day, start_h, start_m)
            end_h, end_m = map(int, end.split(':'))
            dt_end = datetime.datetime(year, month, day, end_h, end_m)

            notes = class_notes.get(date, [])

            yield EVENT(dt_start, dt_end, name, rooms, lecturers, notes)

def print_beginning_between(events, start, end):
    '''print events from a heapq, that begin between start and end.
       all events ending before start are discarded.
    '''
    while events:
        ev = heapq.heappop(events)
        if ev.dt_end <= start:
            continue
        if ev.dt_start >= end:
            heapq.heappush(events, ev)
            break
        print_event(ev)

def print_event(event):
    '''pretty print event details
    '''
    print event.name
    print '  start:', event.dt_start
    print '    end:', event.dt_end
    print '  rooms:', ', '.join(event.rooms)
    print '     by:', ', '.join(event.lecturers)
    nice_notes = []
    for note in event.notes:
        for i, line in enumerate(textwrap.wrap(note, width=50)):
            if i == 0:
                line = '   note: ' + line
            else:
                line = '         ' + line
            nice_notes.append(line)
    if nice_notes:
        print '\n'.join(nice_notes)
    print

def main():
    parser = optparse.OptionParser()

    parser.add_option('-0', '--today', action='store_true',
        dest='today', default=False)
    parser.add_option('-1', '--tomorrow', action='store_true',
        dest='tomorrow', default=False)
    parser.add_option('-w', '--week', action='store', dest='week',
        type='int', default=-1)
    parser.add_option('-p', '--progress', action='store_true',
        dest='progress', default=False)

    options, args = parser.parse_args()

    # note: shorthands to clean up the following code
    now = datetime.datetime.now()
    today = datetime.datetime(now.year, now.month, now.day)

    # note: ignore past events
    next_events = []
    total_num_events = 0
    for name in list_classes():
        for event in read_class(name):
            total_num_events += 1
            if event.dt_end >= now:
                heapq.heappush(next_events, event)
    num_completed = total_num_events - len(next_events)

    if options.today:
        end_of_today = today + datetime.timedelta(days=1, seconds=-1)
        print_beginning_between(next_events, now, end_of_today)

    if options.tomorrow:
        tomorrow = today + datetime.timedelta(days=1)
        end_of_tomorrow = tomorrow + datetime.timedelta(days=1, seconds=-1)
        print_beginning_between(next_events, tomorrow, end_of_tomorrow)

    if options.week > -1:
        start_of_week = today + datetime.timedelta(
            days=(-today.weekday() + 7 * options.week))
        end_of_week = start_of_week + datetime.timedelta(days=7, seconds=-1)
        print_beginning_between(next_events, start_of_week, end_of_week)

    if options.progress:
        print 'progress:', round(100.0*num_completed/total_num_events, 1), '%'

if __name__ == '__main__':
    main()

